{
  "contractName": "IVault",
  "abi": [
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approvedStrategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"activeStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activeStrategy()\":{\"details\":\"Returns the current active strategy of the vault. Only strategist can select active strategy for the vault. At most strategy is active at a time.\"},\"approvedStrategies(address)\":{\"details\":\"Checks whether a strategy is approved on the vault. Only governance can approve and revoke strategies.\",\"params\":{\"_strategy\":\"Strategy address to check.\"},\"returns\":{\"_0\":\"Whether the strategy is approved on the vault.\"}},\"controller()\":{\"details\":\"Returns the Controller address.\"},\"emergencyMode()\":{\"details\":\"Whether the vault is now in emergency mode. When the vault is in emergency mode: 1. No deposit is allowed (but withdraw is allowed); 2. No new active strategy can be set.\"},\"governance()\":{\"details\":\"Returns the governance of the vault. Note that Controller and all vaults share the same governance, so this is a shortcut to return Controller.governance().\"},\"notifyRewardAmount(uint256)\":{\"details\":\"Notifies the vault that a new reward is added.\",\"params\":{\"_rewardAmount\":\"Amount of reward that is newly added to the vault.\"}},\"strategist()\":{\"details\":\"Returns the strategist of the vault. Each vault has its own strategist to perform daily permissioned opertions. Vault and its strategies managed share the same strategist.\"},\"want()\":{\"details\":\"Returns the token that the vault pools.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface of Vault contract.  Vaults are capital pools of one single token which seaks yield from the market. A vault manages multiple strategies and at most one strategy is active at a time.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol\":{\"keccak256\":\"0x944be3a54a80ead227e75b9e015bc517ecbaf26c0a49adfd3ea2f534f77a47bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b4839e0fd339863dac1c5306db2a3c2f2261c4ae5937942d4f9d9ddd1e5c7757\",\"dweb:/ipfs/Qmb8Ma44bfDgzzAUqXsmZFDEUK17B1PgLdKAYDVP1vx2s4\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2cbeb499bad52667b96dd7df8e9b1f583e8c07afaba0018a75e5b7ff6e777173\",\"dweb:/ipfs/QmPLJnuhEcWnpmhMHKsiuVHVxMwb5k6idYyjajbrtZLz5B\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\n/**\n * @notice Interface of Vault contract.\n * \n * Vaults are capital pools of one single token which seaks yield from the market.\n * A vault manages multiple strategies and at most one strategy is active at a time.\n */\ninterface IVault {\n\n    /**\n     * @dev Returns the token that the vault pools.\n     */\n    function want() external view returns (IERC20Upgradeable);\n\n    /**\n     * @dev Returns the Controller address.\n     */\n    function controller() external view returns (address);\n\n    /**\n     * @dev Returns the governance of the vault.\n     * Note that Controller and all vaults share the same governance, so this is\n     * a shortcut to return Controller.governance().\n     */\n    function governance() external view returns (address);\n\n    /**\n     * @dev Returns the strategist of the vault.\n     * Each vault has its own strategist to perform daily permissioned opertions.\n     * Vault and its strategies managed share the same strategist.\n     */\n    function strategist() external view returns (address);\n\n    /**\n     * @dev Checks whether a strategy is approved on the vault.\n     * Only governance can approve and revoke strategies.\n     * @param _strategy Strategy address to check.\n     * @return Whether the strategy is approved on the vault.\n     */\n    function approvedStrategies(address _strategy) external view returns (bool);\n\n    /**\n     * @dev Returns the current active strategy of the vault.\n     * Only strategist can select active strategy for the vault. At most strategy\n     * is active at a time.\n     */\n    function activeStrategy() external view returns (address); \n\n    /**\n     * @dev Whether the vault is now in emergency mode.\n     * When the vault is in emergency mode:\n     * 1. No deposit is allowed (but withdraw is allowed);\n     * 2. No new active strategy can be set.\n     */\n    function emergencyMode() external view returns (bool);\n\n    /**\n     * @dev Notifies the vault that a new reward is added.\n     * @param _rewardAmount Amount of reward that is newly added to the vault.\n     */\n    function notifyRewardAmount(uint256 _rewardAmount) external;\n}",
  "sourcePath": "/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol",
  "ast": {
    "absolutePath": "/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol",
    "exportedSymbols": {
      "IVault": [
        1446
      ]
    },
    "id": 1447,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1393,
        "literals": [
          "solidity",
          "0.6",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:6"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
        "id": 1394,
        "nodeType": "ImportDirective",
        "scope": 1447,
        "sourceUnit": 2367,
        "src": "57:79:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 1395,
          "nodeType": "StructuredDocumentation",
          "src": "138:219:6",
          "text": " @notice Interface of Vault contract.\n \n Vaults are capital pools of one single token which seaks yield from the market.\n A vault manages multiple strategies and at most one strategy is active at a time."
        },
        "fullyImplemented": false,
        "id": 1446,
        "linearizedBaseContracts": [
          1446
        ],
        "name": "IVault",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": {
              "id": 1396,
              "nodeType": "StructuredDocumentation",
              "src": "382:63:6",
              "text": " @dev Returns the token that the vault pools."
            },
            "functionSelector": "1f1fcd51",
            "id": 1401,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "want",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1397,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "463:2:6"
            },
            "returnParameters": {
              "id": 1400,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1399,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1401,
                  "src": "489:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20Upgradeable_$2366",
                    "typeString": "contract IERC20Upgradeable"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 1398,
                    "name": "IERC20Upgradeable",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2366,
                    "src": "489:17:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20Upgradeable_$2366",
                      "typeString": "contract IERC20Upgradeable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "488:19:6"
            },
            "scope": 1446,
            "src": "450:58:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1402,
              "nodeType": "StructuredDocumentation",
              "src": "514:55:6",
              "text": " @dev Returns the Controller address."
            },
            "functionSelector": "f77c4791",
            "id": 1407,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "controller",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1403,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "593:2:6"
            },
            "returnParameters": {
              "id": 1406,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1405,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1407,
                  "src": "619:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1404,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "619:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "618:9:6"
            },
            "scope": 1446,
            "src": "574:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1408,
              "nodeType": "StructuredDocumentation",
              "src": "634:194:6",
              "text": " @dev Returns the governance of the vault.\n Note that Controller and all vaults share the same governance, so this is\n a shortcut to return Controller.governance()."
            },
            "functionSelector": "5aa6e675",
            "id": 1413,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "governance",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1409,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "852:2:6"
            },
            "returnParameters": {
              "id": 1412,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1411,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1413,
                  "src": "878:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1410,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "878:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "877:9:6"
            },
            "scope": 1446,
            "src": "833:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1414,
              "nodeType": "StructuredDocumentation",
              "src": "893:209:6",
              "text": " @dev Returns the strategist of the vault.\n Each vault has its own strategist to perform daily permissioned opertions.\n Vault and its strategies managed share the same strategist."
            },
            "functionSelector": "1fe4a686",
            "id": 1419,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "strategist",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1415,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1126:2:6"
            },
            "returnParameters": {
              "id": 1418,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1417,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1419,
                  "src": "1152:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1416,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1152:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1151:9:6"
            },
            "scope": 1446,
            "src": "1107:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1420,
              "nodeType": "StructuredDocumentation",
              "src": "1167:246:6",
              "text": " @dev Checks whether a strategy is approved on the vault.\n Only governance can approve and revoke strategies.\n @param _strategy Strategy address to check.\n @return Whether the strategy is approved on the vault."
            },
            "functionSelector": "c613aec0",
            "id": 1427,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approvedStrategies",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1423,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1422,
                  "mutability": "mutable",
                  "name": "_strategy",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1427,
                  "src": "1446:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1421,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1446:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1445:19:6"
            },
            "returnParameters": {
              "id": 1426,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1425,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1427,
                  "src": "1488:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1424,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1488:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1487:6:6"
            },
            "scope": 1446,
            "src": "1418:76:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1428,
              "nodeType": "StructuredDocumentation",
              "src": "1500:183:6",
              "text": " @dev Returns the current active strategy of the vault.\n Only strategist can select active strategy for the vault. At most strategy\n is active at a time."
            },
            "functionSelector": "cd3c4255",
            "id": 1433,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "activeStrategy",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1429,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1711:2:6"
            },
            "returnParameters": {
              "id": 1432,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1431,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1433,
                  "src": "1737:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1430,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1737:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1736:9:6"
            },
            "scope": 1446,
            "src": "1688:58:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1434,
              "nodeType": "StructuredDocumentation",
              "src": "1753:215:6",
              "text": " @dev Whether the vault is now in emergency mode.\n When the vault is in emergency mode:\n 1. No deposit is allowed (but withdraw is allowed);\n 2. No new active strategy can be set."
            },
            "functionSelector": "0905f560",
            "id": 1439,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "emergencyMode",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1435,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1995:2:6"
            },
            "returnParameters": {
              "id": 1438,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1437,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1439,
                  "src": "2021:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1436,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2021:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2020:6:6"
            },
            "scope": 1446,
            "src": "1973:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1440,
              "nodeType": "StructuredDocumentation",
              "src": "2033:149:6",
              "text": " @dev Notifies the vault that a new reward is added.\n @param _rewardAmount Amount of reward that is newly added to the vault."
            },
            "functionSelector": "3c6b16ab",
            "id": 1445,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "notifyRewardAmount",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1443,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1442,
                  "mutability": "mutable",
                  "name": "_rewardAmount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1445,
                  "src": "2215:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1441,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2215:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2214:23:6"
            },
            "returnParameters": {
              "id": 1444,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2246:0:6"
            },
            "scope": 1446,
            "src": "2187:60:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1447,
        "src": "358:1891:6"
      }
    ],
    "src": "32:2217:6"
  },
  "legacyAST": {
    "absolutePath": "/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol",
    "exportedSymbols": {
      "IVault": [
        1446
      ]
    },
    "id": 1447,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1393,
        "literals": [
          "solidity",
          "0.6",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:6"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
        "id": 1394,
        "nodeType": "ImportDirective",
        "scope": 1447,
        "sourceUnit": 2367,
        "src": "57:79:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 1395,
          "nodeType": "StructuredDocumentation",
          "src": "138:219:6",
          "text": " @notice Interface of Vault contract.\n \n Vaults are capital pools of one single token which seaks yield from the market.\n A vault manages multiple strategies and at most one strategy is active at a time."
        },
        "fullyImplemented": false,
        "id": 1446,
        "linearizedBaseContracts": [
          1446
        ],
        "name": "IVault",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": {
              "id": 1396,
              "nodeType": "StructuredDocumentation",
              "src": "382:63:6",
              "text": " @dev Returns the token that the vault pools."
            },
            "functionSelector": "1f1fcd51",
            "id": 1401,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "want",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1397,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "463:2:6"
            },
            "returnParameters": {
              "id": 1400,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1399,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1401,
                  "src": "489:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20Upgradeable_$2366",
                    "typeString": "contract IERC20Upgradeable"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 1398,
                    "name": "IERC20Upgradeable",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2366,
                    "src": "489:17:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20Upgradeable_$2366",
                      "typeString": "contract IERC20Upgradeable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "488:19:6"
            },
            "scope": 1446,
            "src": "450:58:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1402,
              "nodeType": "StructuredDocumentation",
              "src": "514:55:6",
              "text": " @dev Returns the Controller address."
            },
            "functionSelector": "f77c4791",
            "id": 1407,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "controller",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1403,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "593:2:6"
            },
            "returnParameters": {
              "id": 1406,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1405,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1407,
                  "src": "619:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1404,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "619:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "618:9:6"
            },
            "scope": 1446,
            "src": "574:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1408,
              "nodeType": "StructuredDocumentation",
              "src": "634:194:6",
              "text": " @dev Returns the governance of the vault.\n Note that Controller and all vaults share the same governance, so this is\n a shortcut to return Controller.governance()."
            },
            "functionSelector": "5aa6e675",
            "id": 1413,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "governance",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1409,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "852:2:6"
            },
            "returnParameters": {
              "id": 1412,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1411,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1413,
                  "src": "878:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1410,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "878:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "877:9:6"
            },
            "scope": 1446,
            "src": "833:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1414,
              "nodeType": "StructuredDocumentation",
              "src": "893:209:6",
              "text": " @dev Returns the strategist of the vault.\n Each vault has its own strategist to perform daily permissioned opertions.\n Vault and its strategies managed share the same strategist."
            },
            "functionSelector": "1fe4a686",
            "id": 1419,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "strategist",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1415,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1126:2:6"
            },
            "returnParameters": {
              "id": 1418,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1417,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1419,
                  "src": "1152:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1416,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1152:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1151:9:6"
            },
            "scope": 1446,
            "src": "1107:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1420,
              "nodeType": "StructuredDocumentation",
              "src": "1167:246:6",
              "text": " @dev Checks whether a strategy is approved on the vault.\n Only governance can approve and revoke strategies.\n @param _strategy Strategy address to check.\n @return Whether the strategy is approved on the vault."
            },
            "functionSelector": "c613aec0",
            "id": 1427,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approvedStrategies",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1423,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1422,
                  "mutability": "mutable",
                  "name": "_strategy",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1427,
                  "src": "1446:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1421,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1446:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1445:19:6"
            },
            "returnParameters": {
              "id": 1426,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1425,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1427,
                  "src": "1488:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1424,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1488:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1487:6:6"
            },
            "scope": 1446,
            "src": "1418:76:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1428,
              "nodeType": "StructuredDocumentation",
              "src": "1500:183:6",
              "text": " @dev Returns the current active strategy of the vault.\n Only strategist can select active strategy for the vault. At most strategy\n is active at a time."
            },
            "functionSelector": "cd3c4255",
            "id": 1433,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "activeStrategy",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1429,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1711:2:6"
            },
            "returnParameters": {
              "id": 1432,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1431,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1433,
                  "src": "1737:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1430,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1737:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1736:9:6"
            },
            "scope": 1446,
            "src": "1688:58:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1434,
              "nodeType": "StructuredDocumentation",
              "src": "1753:215:6",
              "text": " @dev Whether the vault is now in emergency mode.\n When the vault is in emergency mode:\n 1. No deposit is allowed (but withdraw is allowed);\n 2. No new active strategy can be set."
            },
            "functionSelector": "0905f560",
            "id": 1439,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "emergencyMode",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1435,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1995:2:6"
            },
            "returnParameters": {
              "id": 1438,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1437,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1439,
                  "src": "2021:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1436,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2021:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2020:6:6"
            },
            "scope": 1446,
            "src": "1973:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1440,
              "nodeType": "StructuredDocumentation",
              "src": "2033:149:6",
              "text": " @dev Notifies the vault that a new reward is added.\n @param _rewardAmount Amount of reward that is newly added to the vault."
            },
            "functionSelector": "3c6b16ab",
            "id": 1445,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "notifyRewardAmount",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1443,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1442,
                  "mutability": "mutable",
                  "name": "_rewardAmount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1445,
                  "src": "2215:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1441,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2215:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2214:23:6"
            },
            "returnParameters": {
              "id": 1444,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2246:0:6"
            },
            "scope": 1446,
            "src": "2187:60:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1447,
        "src": "358:1891:6"
      }
    ],
    "src": "32:2217:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.12+commit.27d51765.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-12-14T10:34:29.198Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activeStrategy()": {
        "details": "Returns the current active strategy of the vault. Only strategist can select active strategy for the vault. At most strategy is active at a time."
      },
      "approvedStrategies(address)": {
        "details": "Checks whether a strategy is approved on the vault. Only governance can approve and revoke strategies.",
        "params": {
          "_strategy": "Strategy address to check."
        },
        "returns": {
          "_0": "Whether the strategy is approved on the vault."
        }
      },
      "controller()": {
        "details": "Returns the Controller address."
      },
      "emergencyMode()": {
        "details": "Whether the vault is now in emergency mode. When the vault is in emergency mode: 1. No deposit is allowed (but withdraw is allowed); 2. No new active strategy can be set."
      },
      "governance()": {
        "details": "Returns the governance of the vault. Note that Controller and all vaults share the same governance, so this is a shortcut to return Controller.governance()."
      },
      "notifyRewardAmount(uint256)": {
        "details": "Notifies the vault that a new reward is added.",
        "params": {
          "_rewardAmount": "Amount of reward that is newly added to the vault."
        }
      },
      "strategist()": {
        "details": "Returns the strategist of the vault. Each vault has its own strategist to perform daily permissioned opertions. Vault and its strategies managed share the same strategist."
      },
      "want()": {
        "details": "Returns the token that the vault pools."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Interface of Vault contract.  Vaults are capital pools of one single token which seaks yield from the market. A vault manages multiple strategies and at most one strategy is active at a time.",
    "version": 1
  }
}