{
  "contractName": "IVault",
  "abi": [
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approvedStrategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"activeStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activeStrategy()\":{\"details\":\"Returns the current active strategy of the vault. Only strategist can select active strategy for the vault. At most strategy is active at a time.\"},\"approvedStrategies(address)\":{\"details\":\"Checks whether a strategy is approved on the vault. Only governance can approve and revoke strategies.\",\"params\":{\"_strategy\":\"Strategy address to check.\"},\"returns\":{\"_0\":\"Whether the strategy is approved on the vault.\"}},\"controller()\":{\"details\":\"Returns the Controller address.\"},\"emergencyMode()\":{\"details\":\"Whether the vault is now in emergency mode. When the vault is in emergency mode: 1. No deposit is allowed (but withdraw is allowed); 2. No new active strategy can be set.\"},\"governance()\":{\"details\":\"Returns the governance of the vault. Note that Controller and all vaults share the same governance, so this is a shortcut to return Controller.governance().\"},\"notifyRewardAmount(uint256)\":{\"details\":\"Notifies the vault that a new reward is added.\",\"params\":{\"_rewardAmount\":\"Amount of reward that is newly added to the vault.\"}},\"strategist()\":{\"details\":\"Returns the strategist of the vault. Each vault has its own strategist to perform daily permissioned opertions. Vault and its strategies managed share the same strategist.\"},\"want()\":{\"details\":\"Returns the token that the vault pools.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface of Vault contract.  Vaults are capital pools of one single token which seaks yield from the market. A vault manages multiple strategies and at most one strategy is active at a time.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol\":{\"keccak256\":\"0xba87c0c908136ba0ac5f3cf05f45eaa7d1b30a46832fc0a23eafaf396fa699ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41fc41523686bcdb1617074095169ea939de858942c296c7d0bc9051bfc0f979\",\"dweb:/ipfs/QmXdLbDBP3R6WkmFwPAgh6GN19PkFMMzoYaetTJ1YS6vwt\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n/**\n * @notice Interface of Vault contract.\n * \n * Vaults are capital pools of one single token which seaks yield from the market.\n * A vault manages multiple strategies and at most one strategy is active at a time.\n */\ninterface IVault {\n\n    /**\n     * @dev Returns the token that the vault pools.\n     */\n    function want() external view returns (address);\n\n    /**\n     * @dev Returns the Controller address.\n     */\n    function controller() external view returns (address);\n\n    /**\n     * @dev Returns the governance of the vault.\n     * Note that Controller and all vaults share the same governance, so this is\n     * a shortcut to return Controller.governance().\n     */\n    function governance() external view returns (address);\n\n    /**\n     * @dev Returns the strategist of the vault.\n     * Each vault has its own strategist to perform daily permissioned opertions.\n     * Vault and its strategies managed share the same strategist.\n     */\n    function strategist() external view returns (address);\n\n    /**\n     * @dev Checks whether a strategy is approved on the vault.\n     * Only governance can approve and revoke strategies.\n     * @param _strategy Strategy address to check.\n     * @return Whether the strategy is approved on the vault.\n     */\n    function approvedStrategies(address _strategy) external view returns (bool);\n\n    /**\n     * @dev Returns the current active strategy of the vault.\n     * Only strategist can select active strategy for the vault. At most strategy\n     * is active at a time.\n     */\n    function activeStrategy() external view returns (address); \n\n    /**\n     * @dev Whether the vault is now in emergency mode.\n     * When the vault is in emergency mode:\n     * 1. No deposit is allowed (but withdraw is allowed);\n     * 2. No new active strategy can be set.\n     */\n    function emergencyMode() external view returns (bool);\n\n    /**\n     * @dev Notifies the vault that a new reward is added.\n     * @param _rewardAmount Amount of reward that is newly added to the vault.\n     */\n    function notifyRewardAmount(uint256 _rewardAmount) external;\n}",
  "sourcePath": "/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol",
  "ast": {
    "absolutePath": "/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol",
    "exportedSymbols": {
      "IVault": [
        1483
      ]
    },
    "id": 1484,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1431,
        "literals": [
          "solidity",
          "0.6",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:6"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 1432,
          "nodeType": "StructuredDocumentation",
          "src": "57:219:6",
          "text": " @notice Interface of Vault contract.\n \n Vaults are capital pools of one single token which seaks yield from the market.\n A vault manages multiple strategies and at most one strategy is active at a time."
        },
        "fullyImplemented": false,
        "id": 1483,
        "linearizedBaseContracts": [
          1483
        ],
        "name": "IVault",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": {
              "id": 1433,
              "nodeType": "StructuredDocumentation",
              "src": "301:63:6",
              "text": " @dev Returns the token that the vault pools."
            },
            "functionSelector": "1f1fcd51",
            "id": 1438,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "want",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1434,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "382:2:6"
            },
            "returnParameters": {
              "id": 1437,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1436,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1438,
                  "src": "408:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1435,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "408:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "407:9:6"
            },
            "scope": 1483,
            "src": "369:48:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1439,
              "nodeType": "StructuredDocumentation",
              "src": "423:55:6",
              "text": " @dev Returns the Controller address."
            },
            "functionSelector": "f77c4791",
            "id": 1444,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "controller",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1440,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "502:2:6"
            },
            "returnParameters": {
              "id": 1443,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1442,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1444,
                  "src": "528:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1441,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "528:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "527:9:6"
            },
            "scope": 1483,
            "src": "483:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1445,
              "nodeType": "StructuredDocumentation",
              "src": "543:194:6",
              "text": " @dev Returns the governance of the vault.\n Note that Controller and all vaults share the same governance, so this is\n a shortcut to return Controller.governance()."
            },
            "functionSelector": "5aa6e675",
            "id": 1450,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "governance",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1446,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "761:2:6"
            },
            "returnParameters": {
              "id": 1449,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1448,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1450,
                  "src": "787:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1447,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "787:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "786:9:6"
            },
            "scope": 1483,
            "src": "742:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1451,
              "nodeType": "StructuredDocumentation",
              "src": "802:209:6",
              "text": " @dev Returns the strategist of the vault.\n Each vault has its own strategist to perform daily permissioned opertions.\n Vault and its strategies managed share the same strategist."
            },
            "functionSelector": "1fe4a686",
            "id": 1456,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "strategist",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1452,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1035:2:6"
            },
            "returnParameters": {
              "id": 1455,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1454,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1456,
                  "src": "1061:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1453,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1061:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1060:9:6"
            },
            "scope": 1483,
            "src": "1016:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1457,
              "nodeType": "StructuredDocumentation",
              "src": "1076:246:6",
              "text": " @dev Checks whether a strategy is approved on the vault.\n Only governance can approve and revoke strategies.\n @param _strategy Strategy address to check.\n @return Whether the strategy is approved on the vault."
            },
            "functionSelector": "c613aec0",
            "id": 1464,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approvedStrategies",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1460,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1459,
                  "mutability": "mutable",
                  "name": "_strategy",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1464,
                  "src": "1355:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1458,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1355:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1354:19:6"
            },
            "returnParameters": {
              "id": 1463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1462,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1464,
                  "src": "1397:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1461,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1397:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1396:6:6"
            },
            "scope": 1483,
            "src": "1327:76:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1465,
              "nodeType": "StructuredDocumentation",
              "src": "1409:183:6",
              "text": " @dev Returns the current active strategy of the vault.\n Only strategist can select active strategy for the vault. At most strategy\n is active at a time."
            },
            "functionSelector": "cd3c4255",
            "id": 1470,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "activeStrategy",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1466,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1620:2:6"
            },
            "returnParameters": {
              "id": 1469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1468,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1470,
                  "src": "1646:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1646:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1645:9:6"
            },
            "scope": 1483,
            "src": "1597:58:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1471,
              "nodeType": "StructuredDocumentation",
              "src": "1662:215:6",
              "text": " @dev Whether the vault is now in emergency mode.\n When the vault is in emergency mode:\n 1. No deposit is allowed (but withdraw is allowed);\n 2. No new active strategy can be set."
            },
            "functionSelector": "0905f560",
            "id": 1476,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "emergencyMode",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1472,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1904:2:6"
            },
            "returnParameters": {
              "id": 1475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1474,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1476,
                  "src": "1930:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1473,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1930:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1929:6:6"
            },
            "scope": 1483,
            "src": "1882:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1477,
              "nodeType": "StructuredDocumentation",
              "src": "1942:149:6",
              "text": " @dev Notifies the vault that a new reward is added.\n @param _rewardAmount Amount of reward that is newly added to the vault."
            },
            "functionSelector": "3c6b16ab",
            "id": 1482,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "notifyRewardAmount",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1480,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1479,
                  "mutability": "mutable",
                  "name": "_rewardAmount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1482,
                  "src": "2124:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1478,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2124:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2123:23:6"
            },
            "returnParameters": {
              "id": 1481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2155:0:6"
            },
            "scope": 1483,
            "src": "2096:60:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1484,
        "src": "277:1881:6"
      }
    ],
    "src": "32:2126:6"
  },
  "legacyAST": {
    "absolutePath": "/Users/shengdading/git/acSaving/contracts/interfaces/IVault.sol",
    "exportedSymbols": {
      "IVault": [
        1483
      ]
    },
    "id": 1484,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1431,
        "literals": [
          "solidity",
          "0.6",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:6"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 1432,
          "nodeType": "StructuredDocumentation",
          "src": "57:219:6",
          "text": " @notice Interface of Vault contract.\n \n Vaults are capital pools of one single token which seaks yield from the market.\n A vault manages multiple strategies and at most one strategy is active at a time."
        },
        "fullyImplemented": false,
        "id": 1483,
        "linearizedBaseContracts": [
          1483
        ],
        "name": "IVault",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": {
              "id": 1433,
              "nodeType": "StructuredDocumentation",
              "src": "301:63:6",
              "text": " @dev Returns the token that the vault pools."
            },
            "functionSelector": "1f1fcd51",
            "id": 1438,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "want",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1434,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "382:2:6"
            },
            "returnParameters": {
              "id": 1437,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1436,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1438,
                  "src": "408:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1435,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "408:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "407:9:6"
            },
            "scope": 1483,
            "src": "369:48:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1439,
              "nodeType": "StructuredDocumentation",
              "src": "423:55:6",
              "text": " @dev Returns the Controller address."
            },
            "functionSelector": "f77c4791",
            "id": 1444,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "controller",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1440,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "502:2:6"
            },
            "returnParameters": {
              "id": 1443,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1442,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1444,
                  "src": "528:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1441,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "528:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "527:9:6"
            },
            "scope": 1483,
            "src": "483:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1445,
              "nodeType": "StructuredDocumentation",
              "src": "543:194:6",
              "text": " @dev Returns the governance of the vault.\n Note that Controller and all vaults share the same governance, so this is\n a shortcut to return Controller.governance()."
            },
            "functionSelector": "5aa6e675",
            "id": 1450,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "governance",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1446,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "761:2:6"
            },
            "returnParameters": {
              "id": 1449,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1448,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1450,
                  "src": "787:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1447,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "787:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "786:9:6"
            },
            "scope": 1483,
            "src": "742:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1451,
              "nodeType": "StructuredDocumentation",
              "src": "802:209:6",
              "text": " @dev Returns the strategist of the vault.\n Each vault has its own strategist to perform daily permissioned opertions.\n Vault and its strategies managed share the same strategist."
            },
            "functionSelector": "1fe4a686",
            "id": 1456,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "strategist",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1452,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1035:2:6"
            },
            "returnParameters": {
              "id": 1455,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1454,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1456,
                  "src": "1061:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1453,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1061:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1060:9:6"
            },
            "scope": 1483,
            "src": "1016:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1457,
              "nodeType": "StructuredDocumentation",
              "src": "1076:246:6",
              "text": " @dev Checks whether a strategy is approved on the vault.\n Only governance can approve and revoke strategies.\n @param _strategy Strategy address to check.\n @return Whether the strategy is approved on the vault."
            },
            "functionSelector": "c613aec0",
            "id": 1464,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approvedStrategies",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1460,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1459,
                  "mutability": "mutable",
                  "name": "_strategy",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1464,
                  "src": "1355:17:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1458,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1355:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1354:19:6"
            },
            "returnParameters": {
              "id": 1463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1462,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1464,
                  "src": "1397:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1461,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1397:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1396:6:6"
            },
            "scope": 1483,
            "src": "1327:76:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1465,
              "nodeType": "StructuredDocumentation",
              "src": "1409:183:6",
              "text": " @dev Returns the current active strategy of the vault.\n Only strategist can select active strategy for the vault. At most strategy\n is active at a time."
            },
            "functionSelector": "cd3c4255",
            "id": 1470,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "activeStrategy",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1466,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1620:2:6"
            },
            "returnParameters": {
              "id": 1469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1468,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1470,
                  "src": "1646:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1646:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1645:9:6"
            },
            "scope": 1483,
            "src": "1597:58:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1471,
              "nodeType": "StructuredDocumentation",
              "src": "1662:215:6",
              "text": " @dev Whether the vault is now in emergency mode.\n When the vault is in emergency mode:\n 1. No deposit is allowed (but withdraw is allowed);\n 2. No new active strategy can be set."
            },
            "functionSelector": "0905f560",
            "id": 1476,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "emergencyMode",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1472,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1904:2:6"
            },
            "returnParameters": {
              "id": 1475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1474,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1476,
                  "src": "1930:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1473,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1930:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1929:6:6"
            },
            "scope": 1483,
            "src": "1882:54:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 1477,
              "nodeType": "StructuredDocumentation",
              "src": "1942:149:6",
              "text": " @dev Notifies the vault that a new reward is added.\n @param _rewardAmount Amount of reward that is newly added to the vault."
            },
            "functionSelector": "3c6b16ab",
            "id": 1482,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "notifyRewardAmount",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1480,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1479,
                  "mutability": "mutable",
                  "name": "_rewardAmount",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1482,
                  "src": "2124:21:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1478,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2124:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2123:23:6"
            },
            "returnParameters": {
              "id": 1481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2155:0:6"
            },
            "scope": 1483,
            "src": "2096:60:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1484,
        "src": "277:1881:6"
      }
    ],
    "src": "32:2126:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.12+commit.27d51765.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-12-14T18:18:59.263Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activeStrategy()": {
        "details": "Returns the current active strategy of the vault. Only strategist can select active strategy for the vault. At most strategy is active at a time."
      },
      "approvedStrategies(address)": {
        "details": "Checks whether a strategy is approved on the vault. Only governance can approve and revoke strategies.",
        "params": {
          "_strategy": "Strategy address to check."
        },
        "returns": {
          "_0": "Whether the strategy is approved on the vault."
        }
      },
      "controller()": {
        "details": "Returns the Controller address."
      },
      "emergencyMode()": {
        "details": "Whether the vault is now in emergency mode. When the vault is in emergency mode: 1. No deposit is allowed (but withdraw is allowed); 2. No new active strategy can be set."
      },
      "governance()": {
        "details": "Returns the governance of the vault. Note that Controller and all vaults share the same governance, so this is a shortcut to return Controller.governance()."
      },
      "notifyRewardAmount(uint256)": {
        "details": "Notifies the vault that a new reward is added.",
        "params": {
          "_rewardAmount": "Amount of reward that is newly added to the vault."
        }
      },
      "strategist()": {
        "details": "Returns the strategist of the vault. Each vault has its own strategist to perform daily permissioned opertions. Vault and its strategies managed share the same strategist."
      },
      "want()": {
        "details": "Returns the token that the vault pools."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Interface of Vault contract.  Vaults are capital pools of one single token which seaks yield from the market. A vault manages multiple strategies and at most one strategy is active at a time.",
    "version": 1
  }
}